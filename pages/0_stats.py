import altair as alt
import pandas as pd
import streamlit as st

from streamlit_app import load_data

# Carregar dataset
df = load_data()

# Header: Estat√≠sticas gerais
st.subheader("üìä Estat√≠sticas Gerais")
col1, col2, col3, col4, col5 = st.columns(5)

with col1:
    st.metric("M√©dia de Idade", f"{df['age'].mean():.1f} anos")

with col2:
    male_count = df[df["sex"] == "Homem"].shape[0]
    female_count = df[df["sex"] == "Mulher"].shape[0]
    st.metric("Propor√ß√£o Homens/Mulheres", f"{male_count}/{female_count}")

with col3:
    risk_positive = (df["target"] == "Maior risco").mean() * 100
    st.metric("Risco de Ataque Card√≠aco", f"{risk_positive:.1f}% com maior risco")

with col4:
    st.metric("M√©dia de Colesterol", f"{df['chol'].mean():.1f} mg/dL")

with col5:
    high_fbs = (df["fbs"] == "Verdadeiro").mean() * 100
    st.metric("Taxa de A√ß√∫car Elevado", f"{high_fbs:.1f}%")

# Se√ß√£o: An√°lise de Fatores de Risco
st.subheader("üìà An√°lise de Fatores de Risco")

# Idade e G√™nero
st.write("### Idade e G√™nero")
col1, col2 = st.columns(2)

with col1:
    bar_chart = (
        alt.Chart(df)
        .mark_bar()
        .encode(
            x=alt.X("sex:N", title="G√™nero"),
            y=alt.Y("count():Q", title="N√∫mero de Pacientes"),
            color=alt.Color("target:N", title="Risco de Ataque Card√≠aco"),
            tooltip=["sex", "count()", "target"],
        )
        .properties(title="Distribui√ß√£o de Risco por G√™nero")
    )
    st.altair_chart(bar_chart, use_container_width=True)

with col2:
    box_chart = (
        alt.Chart(df)
        .mark_boxplot()
        .encode(
            x=alt.X("target:N", title="Risco de Ataque Card√≠aco"),
            y=alt.Y("age:Q", title="Idade"),
            color=alt.Color("target:N", title="Risco"),
            tooltip=["age", "target"],
        )
        .properties(title="Faixa Et√°ria por Risco de Ataque Card√≠aco")
    )
    st.altair_chart(box_chart, use_container_width=True)

# Dor no Peito
st.write("### Dor no Peito")
cp_chart = (
    alt.Chart(df)
    .mark_bar()
    .encode(
        x=alt.X("cp:N", title="Tipo de Dor no Peito"),
        y=alt.Y("count():Q", title="N√∫mero de Pacientes"),
        color=alt.Color("target:N", title="Risco de Ataque Card√≠aco"),
        tooltip=["cp", "count()", "target"],
    )
    .properties(title="Tipos de Dor no Peito vs. Risco de Ataque Card√≠aco")
)
st.altair_chart(cp_chart, use_container_width=True)

# Press√£o Sangu√≠nea e Colesterol
st.write("### Press√£o Sangu√≠nea e Colesterol")
scatter_chart = (
    alt.Chart(df)
    .mark_circle(size=60)
    .encode(
        x=alt.X("trestbps:Q", title="Press√£o Sangu√≠nea em Repouso (mm Hg)"),
        y=alt.Y("chol:Q", title="Colesterol S√©rico (mg/dL)"),
        color=alt.Color("target:N", title="Risco de Ataque Card√≠aco"),
        tooltip=["trestbps", "chol", "target"],
    )
    .properties(title="Rela√ß√£o entre Press√£o Sangu√≠nea e Colesterol")
)
st.altair_chart(scatter_chart, use_container_width=True)

# Frequ√™ncia Card√≠aca M√°xima
st.write("### Frequ√™ncia Card√≠aca M√°xima")
hist_chart = (
    alt.Chart(df)
    .mark_bar()
    .encode(
        x=alt.X("thalach:Q", bin=True, title="Frequ√™ncia Card√≠aca M√°xima (bpm)"),
        y=alt.Y("count():Q", title="N√∫mero de Pacientes"),
        color=alt.Color("target:N", title="Risco de Ataque Card√≠aco"),
        tooltip=["thalach", "count()", "target"],
    )
    .properties(title="Distribui√ß√£o de Frequ√™ncia Card√≠aca por Categoria de Risco")
)
st.altair_chart(hist_chart, use_container_width=True)

# Exerc√≠cio e ECG
st.write("### Exerc√≠cio e ECG")
exang_ecg_chart = (
    alt.Chart(df)
    .mark_bar()
    .encode(
        x=alt.X("restecg:N", title="Resultados do ECG em Repouso"),
        y=alt.Y("count():Q", title="N√∫mero de Pacientes"),
        color=alt.Color("exang:N", title="Angina Induzida por Exerc√≠cio"),
        tooltip=["restecg", "count()", "exang"],
    )
    .properties(title="Distribui√ß√£o de ECG e Exerc√≠cio por Risco")
)
st.altair_chart(exang_ecg_chart, use_container_width=True)

# An√°lise Avan√ßada
st.subheader("üìä An√°lise Avan√ßada")

# Heatmap: slope, oldpeak e risco
st.write("### Rela√ß√£o entre Slope, Oldpeak e Risco")
heatmap = (
    alt.Chart(df)
    .mark_rect()
    .encode(
        x=alt.X("slope:N", title="Inclina√ß√£o do Segmento ST"),
        y=alt.Y("oldpeak:Q", title="Depress√£o do Segmento ST"),
        color=alt.Color("target:N", title="Risco de Ataque Card√≠aco"),
        tooltip=["slope", "oldpeak", "target"],
    )
    .properties(title="Heatmap: Slope vs Oldpeak vs Risco")
)
st.altair_chart(heatmap, use_container_width=True)

# Thalassemia
st.write("### Tipos de Thalassemia")
thal_chart = (
    alt.Chart(df)
    .mark_bar()
    .encode(
        x=alt.X("thal:N", title="Tipo de Thalassemia"),
        y=alt.Y("count():Q", title="N√∫mero de Pacientes"),
        color=alt.Color("target:N", title="Risco de Ataque Card√≠aco"),
        tooltip=["thal", "count()", "target"],
    )
    .properties(title="Distribui√ß√£o de Thalassemia por Categoria de Risco")
)
st.altair_chart(thal_chart, use_container_width=True)

# N√∫mero de vasos
st.write("### N√∫mero de Vasos e Risco")
scatter_vessels = (
    alt.Chart(df)
    .mark_circle(size=60)
    .encode(
        x=alt.X("ca:Q", title="N√∫mero de Vasos Principais"),
        y=alt.Y("oldpeak:Q", title="Depress√£o do Segmento ST"),
        color=alt.Color("target:N", title="Risco de Ataque Card√≠aco"),
        tooltip=["ca", "oldpeak", "target"],
    )
    .properties(title="Rela√ß√£o entre N√∫mero de Vasos e Depress√£o do Segmento ST")
)
st.altair_chart(scatter_vessels, use_container_width=True)
